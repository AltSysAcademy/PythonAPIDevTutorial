0. Explain first the concept of JWT

JWT (JSON Web Token) is an example of an Access Token
1. To get an access token, a client sends authentication info to the API (usually username and password) (login)
2. If the username and password is valid, then the API would generate an access token (in our case, JWT)
3. Inside the JWT, the user's unique ID is stored
4. Then the access token would be sent to the client for later use (thru cookies or local storage)

5. There are certain endpoints that requires an access token to be used, like the 'delete store' method, because it is a destruptive method

Give an example about the concept of an endpoint called '/my-info' which would return information from the API to the client. But it would not be able to return anything without the access token because they do not have the access token. With the access token, they include it in the request of the '/my-info', then the API would recognize it and return the information of the logged in user, instead of manually providing info.

JWT do not lasts forever, it is a security risk, so users must always login. So we need to talk about token refreshing. (Token refreshing is applied on the concept of deleting an account when we want to login again)


Part 1: Setup flask-jwt-extended
1. Include flask-jwt-extended in our flask project (requirements.txt)
2. Import it in the app.py and create a JWT_SECRET_TOKEN and Include it in our Flask App

    from flask_jwt_extended import JWTManager
    
    # SETUP A SECRET KEY FOR JWT
    app.config["JWT_SECRET_KEY"] = "221183046710680362485358125809847539027"
    # Create a JWT Manager Object
    jwt = JWTManager(app)

You should generate a long and random secret key using something like str(secrets.SystemRandom().getrandbits(128)).

Part 2: Create User Model(Database) and Schema (Data Validation)
1. Create a new model called user.py in models

    from db import db

    class UserModel(db.Model):
        __tablename__ = "users"

        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(80), unique=True, nullable=False)
        password = db.Column(db.String, nullable=False)

2. Then create a new Schema
    
    class UserSchema(Schema):
        id = fields.Int(dump_only=True)
        username = fields.Str(required=True)
        password = fields.Str(required=True, load_only=True)

Part 3: Create new endpoints for registering users in resources
'/register'  - POST   (accepts username and password)
'/user/<id>' - GET    (get user)      - TEMPORARY (for testing only)
'/user/<id>' - DELETE (delete user)   - TEMPORARY (for testing only)

0. Create a new file called user.py

    from flask.views import MethodView
    from flask_smorest import Blueprint, abort
    from passlib.hash import pbkdf2_sha256

    from db import db
    from models import UserModel
    from schemas import UserSchema


    blp = Blueprint("Users", __name__, description="Operations on users")

1. Add passlib in the requirements.txt to hash our passwords when saving it and import it in the resources/user.py

    requirements.txt: passlib

    pip install -r requirements.txt


2. Create the register part of the endpoint 

    @blp.route("/register")
    class UserRegister(MethodView):
        @blp.arguments(UserSchema)
        def post(self, user_data):
            if UserModel.query.filter(UserModel.username == user_data["username"]).first():
                abort(409, message="A user with that username already exists.")

            user = UserModel(
                username=user_data["username"],
                password=pbkdf2_sha256.hash(user_data["password"]),
            )
            db.session.add(user)
            db.session.commit()

            return {"message": "User created successfully."}, 201

3. Register it in the API Documentation in the app.py

    from resources.user import blp as UserBlueprint

    api.register_blueprint(UserBlueprint)

4. Create also testing endpoint
    @blp.route("/user/<int:user_id>")
    class User(MethodView):
        """
        This resource can be useful when testing our Flask app.
        We may not want to expose it to public users, but for the
        sake of demonstration in this course, it can be useful
        when we are manipulating data regarding the users.
        """

        @blp.response(200, UserSchema)
        def get(self, user_id):
            user = UserModel.query.get_or_404(user_id)
            return user

        def delete(self, user_id):
            user = UserModel.query.get_or_404(user_id)
            db.session.delete(user)
            db.session.commit()
            return {"message": "User deleted."}, 200

Part 4: Create new resource for login
This is where we will generate the tokens now

1. Import create_access_token in resources/user.py
    from flask_jwt_extended import create_access_token

2. 'create_access_token' will be used if the client has successfully logged in (meaning, we will not create an access token if they failed to log in)
3. Now, as the creators of the API, we could now give them access to certain endpoints that they would not be able to access without the JWT (access token)
4. Create a new endpoint for user login 


    @blp.route("/login")
    class UserLogin(MethodView):
        @blp.arguments(UserSchema)
        def post(self, user_data):
            user = UserModel.query.filter(
                UserModel.username == user_data["username"]
            ).first()


            # If the user exists and the password is correct
            if user and pbkdf2_sha256.verify(user_data["password"], user.password):
                # Here you can see the when we call create_access_token(identity=user.id) we pass in the user's id. This is what gets stored (among other things) inside the JWT, so when the client sends the JWT back on every request, we can tell who the JWT belongs to.
                access_token = create_access_token(identity=user.id)
                return {"access_token": access_token}, 200

            abort(401, message="Invalid credentials.")
    
5. Test the login and copy the access_token and show how it works by going to the website called 'jwt.io'

The red string is the encoded header (header of our JWT, its type and what algorithm did we use)
The violet is the payload (payload of our JWT, what is stored inside the JWT)
    fresh - is the jwt newly made
    iat - time when the jwt was created (unix epoch time)
    jti - unique identifier for this token
    type - what kind of token
    sub - subject (who is this token for, in the example, it would be the user.id, the identity)
    nvf - not valid before (time)
    exp - expiry date of the token

# Try to verify the signature by typing the secret key from our app.py

Whoever has this JWT, they could send it back to us, and we would be able to recognize who this user is based on their JWT (because we would see the user.id in the JWT)

Part 5: Protecting endpoints

1. User could not create new items if they are not logged in
2. Import jwt_required in the resources/item.py
    from flask_jwt_extended import jwt_required

3. Simply add the decorator '@jwt_required' to every single endpoint you want to protect
4. Lets protect the delete item and create item and also put item with @jwt_required

    @blp.route('/item/<int:item_id>')
    class Item(MethodView):
        @jwt_required()
        def delete(self, item_id):
            # Check if the jwt token has an is_admin claim, if not, then abort
            '''
            jwt = get_jwt()
            if not jwt.get("is_admin"):
                abort(401, message="Admin privilege required.")
            '''

            item_to_delete = ItemModel.query.get_or_404(item_id)
            db.session.delete(item_to_delete)
            db.session.commit()
            
            return {"message": "Item deleted."}

        @jwt_required()
        @blp.arguments(ItemUpdateSchema)
        @blp.response(200, ItemSchema)
        def put(self, new_item_data, item_id):
            item = ItemModel.query.get(item_id)

            if item:
                item.name = new_item_data["name"]
                item.price = new_item_data["price"]
            else:
                item = ItemModel(id=item_id, **new_item_data)

            db.session.add(item)
            db.session.commit()

            return item
    
    @blp.route('/item')
    class ItemList(MethodView):
        @jwt_required()
        @blp.arguments(ItemSchema)
        @blp.response(201, ItemSchema)
        def post(self, item_data):
            new_item = ItemModel(**item_data)
            try:
                db.session.add(new_item) 
                db.session.commit()
            except SQLAlchemyError:
                abort(500, message='An error occured while inserting the item.')
                
            return new_item, 201

Part 6: Error handling in Flask-JWT-Extended
    There are many things that could go wrong with JWTs:
        The JWT may be expired (they don't last forever!)
        The JWT may be invalid, such as if the client makes changes to it
        A JWT may be required, but none was provided

1. Go to app.py and import the following
    from flask import Flask, jsonify

2. Copy the following code
    @jwt.expired_token_loader
    def expired_token_callback(jwt_header, jwt_payload):
        return (
            jsonify({"message": "The token has expired.", "error": "token_expired"}),
            401,
        )

    @jwt.invalid_token_loader
    def invalid_token_callback(error):
        return (
            jsonify(
                {"message": "Signature verification failed.", "error": "invalid_token"}
            ),
            401,
        )

    @jwt.unauthorized_loader
    def missing_token_callback(error):
        return (
            jsonify(
                {
                    "description": "Request does not contain an access token.",
                    "error": "authorization_required",
                }
            ),
            401,
        )

    Note that some Flask-JWT-Extended error functions take two arguments: jwt_header and jwt_payload. Others take a single argument, error.

    The ones that don't take JWT information are those that would be called when a JWT is not present (above, when the JWT is invalid or required but not received).

Part 7: After protecting the endpoints, we could now test creating and deleting items from a store
    (To use a jwt token, we need to add it in the header)

    Basic Auth
    Key: Authorization
    Value: Bearer {JWT}


Part 8: Claims and Authorization
1. You could add this line of code in our app.py to create a new claim
    # This means that a user with the identity of 1 (First User) is an admin
    @jwt.additional_claims_loader
    def add_claims_to_jwt(identity):
        if identity == 1:
            return {"is_admin": True}
        return {"is_admin": False}


2. In order for us to use this claim, we must also import get_jwt in every jwt_required() if have

    In resources/item.py

    from flask_jwt_extended import jwt_required, get_jwt

    @jwt_required()
    def delete(self, item_id):
        jwt = get_jwt()

        # identity = get_jwt()["sub"]
        # user = UserModel.query.get(identity)
        # if user.is_admin == 1:

        # Check if the jwt claim has an "is_admin"
        if not jwt.get("is_admin"):
            abort(401, message="Admin privilege required.")

        item = ItemModel.query.get_or_404(item_id)
        db.session.delete(item)
        db.session.commit()
        return {"message": "Item deleted."}