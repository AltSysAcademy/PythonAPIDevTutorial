0. Explain that this time, we will utilize Flask-Smorest to create blueprints and schemas

    Blueprints - Used to design the API Documentation and for routing as well
    Marshmallow - Used for data validation
    Swagger UI - Website documentation of our API code
    MethodView - Used to group the related API methods


1. Create the first blueprint
1.2 Create a folder called 'resources'
    - Add flask_smorest in requirements.txt
    - Add a new file called store.py in 'resources' folder

1.3 Import important libraries in 'store.py'
    - from flask.views import MethodView 
    - from flask_smorest import Blueprint, abort
    
1.4 Create a new blueprint called 'blp' under stores.py
    blp = Blueprint("stores", __name__, description="Operations on stores")

1.5 Create a class based on the name of each endpoints


    class Store(MethodView):
        def get(self):
            pass
        def delete(self):
            pass
    
    and then add the route using the blueprint in the top of the class name

    @blp.route("/store/<string:store_id>)
    class Store(MethodView):
        def get(self, store_id):
            pass
        def delete(self, store_id):
            pass

1.6 Then just paste the code from the original 'app.py' into the methodviews for 'resources/store.py' into each endpoints under the MethodView for store

    - After pasting the code, we have to use the abort function instead of a normal return so that the blueprint could see it and put it in our documentation.

1.7 Create a new blueprint for the item as well, check 'resources/item.py' for data.
    
    blp = Blueprint("items", __name__, description="Operations on items.")

    @blp.route("/item/<string:item_id>")
    class Item(MethodView):
        def get(self, item_id):
            if item_id in items:
                return items[item_id]

            abort(404, message="Item not found.")

        def delete(self, item_id):
            if item_id in items:
                del items[item_id]
                return {"message": "Item deleted."}
            else:
                abort(404, message="Item not found")

        # Validates the update item
        def put(self, new_item_data, item_id):
            # The data from postman that we will use to update our item
            new_item_data = request.get_json()

            if item_id in items:
                item = items[item_id]
                item |= new_item_data

                return item
            
            abort(404, message="Item not found.")


    # The reason why this is called ItemList is because it edits or deals with multiple items at the same time and that this has different endpoint
    @blp.route("/item")
    class ItemList(MethodView):
        def get(self):
            return list(items.values())
        
        def post(self, item_data):
            # The data from postman that we will use to create our item
            item_data = request.get_json()
            
            for item in items.values():
                if (
                    item["name"] == item_data["name"] 
                    and item_data["store_id"] == item["store_id"]
                ):
                    abort(400, message="Item already exists.")

            if item_data["store_id"] not in stores:
                abort(404, message="Store not found.")    
            else:
                item_id = uuid.uuid4().hex

                new_item = {
                    "id": item_id,
                    "name": item_data["name"],
                    "price": item_data["price"],
                    "store_id": item_data["store_id"],
                }

                items.update({item_id:new_item})

                return new_item, 201


2. Remove all in app.py except for the imports and the creation of apps

    from flask import Flask

    app = Flask(__name__)

    # Says that if there is an exception that occured in the flask framework, it would show up in our app as well so that we could fix it
    app.config["PROPAGATE_EXCEPTIONS"] = True

    # Flask Smorest API Docs Configurations
    app.config["API_TITLE"] = "Stores REST API"
    app.config["API_VERSION"] = "v1"

    # Set OPENAPI version (default value)
    app.config["OPENAPI_VERSION"] = "3.0.3"

    # Set the root of the API
    app.config["OPENAPI_URL_PREFIX"] = "/"

    # Set swagger UI to use it for the API Documentation (default values)
    app.config["OPENAPI_SWAGGER_UI_PATH"] = "/swagger-ui"
    app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/"



    # Create a flask_smorest api app now
    api = Api(app)

    # And then register the blueprints that we have created on the resources folder for the API Documentation
    # We need to import the blueprints from the resource folder
    from resources.item import blp as ItemBlueprint
    from resources.store import blp as StoreBlueprint

    api.register_blueprint(ItemBlueprint)
    api.register_blueprint(StoreBlueprint)

3. Try all endpoints and fix all problems
4. Open the link localhost:5000/swagger-ui

    blp.argument - Used to validate the arguments from the user and pass it as the first parameter in the MethodView class
    blp.response - Used to validate the response from our API endpoints to check if it returns the proper data 