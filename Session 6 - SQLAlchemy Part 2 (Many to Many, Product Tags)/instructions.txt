0. Explain the concept of many to many relationship using tags

    An item could be used in multiple items
    A tag could be used in multiple items

    Laptop - Tech Tag
    Tech Tag - PC

1. For tags, it will have the following concept:
    - Many to One Relationship with Stores
        - One store can have many tags
    - Many to Many Relationship with Items
        - One tag can have many items
        - One item can have many tags


NEW API Endpoints:
# Store and Tags
GET  /store/{id}/tag    - Get all tags in a store
POST /store/{id}/tag   - Create a new tag
GET /tag/{id} - Get information on a tag

# Items and Tags
POST /item/{tag}/tag/{id} - Link an item in a store with a tag from the same store
DELETE /item/{id}/tag/{id} - Unlink a tag from an item
DELETE /tag/{id} - Delete a tag, which should not have any items that are linked

2. One to Many between store and tag
2.1. Create a new model for tag and create a relationship from tag to store and vice versa

    model/tag.py
    class TagModel(db.Model):
        __tablename__ = "tags"

        id = db.Column(db.Integer, primary_key=True)
        # Explain why this is important, unique=False and that we will do manual checking
        name = db.Column(db.String(80), unique=False, nullable=False)
        store_id = db.Column(db.Integer, db.ForeignKey("stores.id"), nullable=False)

        # Add a relationship to StoreModel
        store = db.relationship("StoreModel", back_populates="tags")

    model/store.py
    class StoreModel(db.Model):
        __tablename__ = "stores"    

        id = db.Column(db.Integer, primary_key=True)
        name = db.Column(db.String(80), nullable=False, unique=True)

        # Define a relationship
        # One to Many - A Store Could Have More Than One Item
        items = db.relationship("ItemModel", back_populates="store", lazy="dynamic", cascade="all, delete")

        tags = db.relationship("TagModel", back_populates="store", lazy="dynamic", cascade="all, delete")

3. Create new schema for tag
    schemas.py
    class PlainTagSchema(Schema):
        id = fields.Int(dump_only=True)
        name = fields.Str()

    class StoreSchema(PlainStoreSchema):
        items = fields.List(fields.Nested(PlainItemSchema()), dump_only=True)
        tags = fields.List(fields.Nested(PlainTagSchema()), dump_only=True)
   
    class TagSchema(PlainTagSchema):
        # This is load_only because 
        store_id = fields.Int(required=True, load_only=True)
        store = fields.Nested(PlainStoreSchema(), dump_only=True)

4. Create new resource for tag
    resources/tag.py

    from flask import request 
    from flask.views import MethodView
    from flask_smorest import Blueprint, abort

    from schemas import TagSchema

    from models.tag import TagModel
    from models.store import StoreModel
    from db import db
    from sqlalchemy.exc import SQLAlchemyError

    
    @blp.route('/store/<string:store_id>/tag')
    class TagsInStore(MethodView):
        # Getting a tag from a specific store
        @blp.response(200, TagSchema(many=True))
        def get(self, store_id):
            # we are using an ORM, so we do not really need to do a for loop in a tag model and find all items that have the store_id
            # for item in ItemModel.query.all(), if item.store_id == store_id, etc
            store = StoreModel.query.get_or_404(store_id)
            return store.tags.all()

        # Creating a tag in a specific store
        @blp.arguments(TagSchema)
        @blp.response(201, TagSchema)
        def post(self, new_tag_data, store_id):
            # Check if the new tag name is already in the store
            if TagModel.query.filter(
                TagModel.store_id == store_id,
                TagModel.name == new_tag_data["name"]
            ).first():
                abort(400, message="A tag with that name already exists in the store.")

            # We are putting the store_id manually because it is not required in the request body as we are already putting it in our URL Segment
            tag = TagModel(**new_tag_data, store_id=store_id)
            try:
                db.session.add(tag)
                db.session.commit()
            except SQLAlchemyError:
                abort(500, message="An error occured while creating a tag.")
            
            return tag
    
    @blp.route("/tag/<string:tag_id>")
    class Tag(MethodView):
        @blp.response(200, TagSchema)
        def get(self, tag_id):
            tag = TagModel.query.get_or_404(tag_id)
            return tag

5. Register blueprint in the API

    from resources.tags import blp as TagBlueprint

    api.register_blueprint(TagBlueprint)

6. Test APIs
    # Store and Tags
    GET  /store/{id}/tag    - Get all tags in a store
    POST /store/{id}/tag   - Create a new tag
    GET  /tag/{id} - Get information on a tag

7. Create Many to Many relationship with Tags and Items
    - Explain what a conjuction table is

7.1. Create a new Model for TagItemModel
    models/item_tags.py
    from db import db

    # Conjuction Table
    class ItemTags(db.Model):
        __tablename__ = "items_tags"

        id = db.Column(db.Integer, primary_key=True)

        # Define 2 foreign keys
        item_id = db.Column(db.Integer, db.ForeignKey("items.id"))
        tag_id = db.Column(db.Integer, db.ForeignKey("tags.id"))


    ## Add new relationship in tag.py
    models/tag.py
    # Connect this model to ItemModel under tags, but it has to go through the items_tags for validation
    # It will go through the items_tags table, 
    items = db.relationship("ItemModel", back_populates="tags", secondary="items_tags")


    ## Add relationship in item.py
    models/item.py
    tags = db.relationship("TagModel", back_populates="items", secondary="items_tags")


7.2. Edit schema.py
    class ItemSchema(PlainItemSchema):
        store_id = fields.Int(required=True)
        store = fields.Nested(PlainStoreSchema(), dump_only=True)
        
        # Add new data
        tags = fields.List(fields.Nested(PlainTagSchema()), dump_only=True)

    class TagSchema(PlainTagSchema):
        store_id = fields.Int(required=True, load_only=True)
        store = fields.Nested(PlainStoreSchema(), dump_only=True)
        
        # Add this relationship 
        items = fields.List(fields.Nested(PlainItemSchema()), dump_only=True)

    # Used when unlinking a tag to an item
    class TagAndItemSchema(Schema):
        message = fields.Str()
        item = fields.Nested(ItemSchema())
        tag = fields.Nested(TagSchema())

8. Add new endpoints in resources/tag.py
    resources/tag.py

    @blp.route('/tag/<string:tag_id>')
    class Tag(MethodView):
        # Add a method for deleting a tag
        def delete(self, tag_id):
            tag = TagModel.query.get_or_404(tag_id)

            # Check if tag has items
            if tag.items:
                abort(400, message="Could not delete tag, make sure that tag is not linked to any item")
            
            db.session.delete(tag)
            db.session.commit()

            return {"message": "Tag deleted"}, 202

    
    @blp.route('/item/<string:item_id>/tag/<string:tag_id>')
    class LinkTagsToItem(MethodView):
        # Link tags to an item
        @blp.response(201, TagSchema)
        def post(self, item_id, tag_id):
            # Get the item and tag you want to link
            item = ItemModel.query.get_or_404(item_id)
            tag = TagModel.query.get_or_404(tag_id)

            # Before linking, make sure that the item and the tag is inside the same store
            if item.store_id != tag.store_id:
                abort(400, message="Make sure that item and tags belong to the same store before linking.")

            # We would simply add the tag in the 'tags' field of the item
            item.tags.append(tag)
        
            try:
                db.session.add(item)
                db.session.commit()
            except SQLAlchemyError:
                abort(5000, message="An error occured while linking the tag.")
            
            return tag

        @blp.response(200, TagAndItemSchema)
        def delete(self, item_id, tag_id):
            # Get item and tag we want to unlink
            item = ItemModel.query.get_or_404(item_id)
            tag = TagModel.query.get_or_404(tag_id)

            # Updated the list of tags
            # Just simply remove the tag from the 'tags' field from an item
            item.tags.remove(tag)

            try:
                # Adding a new model, updating
                db.session.add(item)
                db.session.commit()
            except SQLAlchemyError:
                abort(500, message="An error occured while unlinking the tag.")
            
            return {"message": "Item removed from the tag.", "item": item, "tag": tag}