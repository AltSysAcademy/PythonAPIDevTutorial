Part 0: Tell them that we will continue first with the concept of claims in JWT Tokens which are like additional information on an access token.

Part 1: Claims and Authorization
1. You could add this line of code in our app.py to create a new claim
    # This means that a user with the identity of 1 (First User) is an admin
    @jwt.additional_claims_loader
    def add_claims_to_jwt(identity):
        if identity == 1:
            return {"is_admin": True}
        return {"is_admin": False}


    ## Or they could also use this:
    # Add custom claims
    additional_claims = {
        "role": "admin",  # Example claim
        "permissions": ["read", "write"]  # Another example claim
    }
    
    # Create access token with the claims
    access_token = create_access_token(identity=user_identity, additional_claims=additional_claims)
    


2. In order for us to use this claim, we must also import get_jwt in every jwt_required() if have

    In resources/item.py

    from flask_jwt_extended import jwt_required, get_jwt

    @jwt_required()
    def delete(self, item_id):
        jwt = get_jwt()

        # identity = get_jwt()["sub"]
        # user = UserModel.query.get(identity)
        # if user.is_admin == 1:

        # Check if the jwt claim has an "is_admin"
        if not jwt.get("is_admin"):
            abort(401, message="Admin privilege required.")

        item = ItemModel.query.get_or_404(item_id)
        db.session.delete(item)
        db.session.commit()
        return {"message": "Item deleted."}



Part 1: Explain the concept of logging out
- The concept of logout is simply creating a list of terminated tokens.

1. Create blocklist.py
    BLOCKLIST = set()

2. Open app.py and import the blocklist
    from blocklist import BLOCKLIST

    # This always run when we receive a JWT 
    @jwt.token_in_blocklist_loader
    def check_if_token_in_blocklist(jwt_header, jwt_payload):
        # True or False
        return jwt_payload["jti"] in BLOCKLIST

3. Add a custom error message if the token that has been given to the api is expired
    @jwt.revoked_token_loader
    def revoked_token_callback(jwt_header, jwt_payload):
        return (
            jsonify(
                {"description", "The token has been revoked.", "error":"token_revoked"}, 401
            )
        )

4. Implement the /logout endpoint
    resources/user.py

    from blocklist import BLOCKLIST
    
    @blp.route("/logout")
    class UserLogout(MethodView):
        @jwt_required()
        def post(self):
            # GET JTI
            jti = get_jwt()["jti"]

            # Add JTI in our blocklist
            BLOCKLIST.add(jti)
            return {"message": "Successfully logged out."} 

5: Test the logout


Part 2: Token Refreshing

1. Explain the concept of token refreshing
    - Instead of asking the user to reauthenticate everytime after their access token has expired, we would create non-fresh tokens and a '/refresh' endpoint.
    - When we login, we get FRESH access token
    - When we refresh, we get "Non-Fresh" token, no need to provide any username and password for refresh.
    - It may seem unsafe, because it means that users could generate a token without having to put their username and password, but the key word here is the word "Non-Fresh"


    - With a fresh and a non-fresh token, we could setup certain endpoints to only accept fresh tokens or non-fresh tokens.

    - For example: When a user wants to delete their account, we must provide a fresh-token for that. It means that the user is really the one deleting their account
    - For example: When a user just simply wants to browse on their homepage, that only requires non-fresh token

2. Go in user.py and edit logout

    from flask_jwt_extended import create_access_token, create_refresh_token, jwt_required, get_jwt, get_jti

        
    @blp.route("/login")
    class UserLogin(MethodView):
        @blp.arguments(UserSchema)
        def post(self, login_cred):
            user = UserModel.query.filter(
                UserModel.username == login_cred["username"]
            ).first()

            if user and pbkdf2_sha256.verify(login_cred["password"], user.password):
                # Create access token
                # Edit this part to say that this is a fresh token
                access_token = create_access_token(identity=user.id, fresh=True)

                # This token is used to create non-fresh access token only for this certain user
                refresh_token = 
                create_refresh_token(identity=user.id)


                return {"access_token": access_token, "refresh_token": refresh_token}
            
            abort(401, message="Invalid credentials.")

3. The refresh token is used when accessing the /refresh endpoint (Used to create a non-fresh token)

4. Code the /refresh, endpoint
    @blp.route("/refresh")
    class TokenRefresh(MethodView):
        # Only accepts refresh tokens
        @jwt_required(refresh=True)
        def post(self):
            current_user = get_jwt()["sub"]

            # Create a new non-fresh access token
            new_token = create_access_token(identity=current_user, fresh=False)

            return {"access_token": new_token}

5. On our item.py resources, just change certain endpoints  
    
    # Just add this to every endpoint that requires fresh token
    @jwt_required(fresh=True)

    Delete item, delete store, create item, edit item
